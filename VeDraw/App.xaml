<Application
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:VeDraw"
    xmlns:utils="clr-namespace:VeDraw.Utils"
    xmlns:model="clr-namespace:VeDraw.Models"
    xmlns:ctrls="clr-namespace:VeDraw.Controls"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="VeDraw.App"
    StartupUri="Views/MainWindow.xaml"
    DispatcherUnhandledException="OnDispatcherUnhandledException">
    <Application.Resources>
        <ResourceDictionary>
            <!-- Namin rule: [Category].[TargetType].[TargetPropertyType].[TargetProperty].[Theme|Event]-->
            
            <Color x:Key="Common.Control.Color.Transparent">#00ffffff</Color>
            <Color x:Key="Common.Control.Color.Background">#ffffffff</Color>
            <Color x:Key="Common.Control.Color.Background.Light">#FF999999</Color>
            <Color x:Key="Common.Control.Color.Background.Dark">#ff333333</Color>
            <Color x:Key="Common.Control.Color.Foreground">#FF999999</Color>
            <Color x:Key="Common.Control.Color.Foreground.MouseOver">#ff222222</Color>
            <Color x:Key="Common.Control.Color.Foreground.Light">#ffEEEEEE</Color>
            <Color x:Key="Common.Control.Color.Foreground.Dark">#ff999999</Color>
            <Color x:Key="Common.Control.Color.BorderBrush">#FF999999</Color>

            <SolidColorBrush x:Key="Common.Control.Brush.Transparent" Color="{StaticResource Common.Control.Color.Transparent}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Background" Color="{StaticResource Common.Control.Color.Background}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Background.Light" Color="{StaticResource Common.Control.Color.Background.Light}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Background.Dark" Color="{StaticResource Common.Control.Color.Background.Dark}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Foreground" Color="{StaticResource Common.Control.Color.Foreground}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Foreground.MouseOver" Color="{StaticResource Common.Control.Color.Foreground.MouseOver}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Foreground.Light" Color="{StaticResource Common.Control.Color.Foreground.Light}" />
            <SolidColorBrush x:Key="Common.Control.Brush.Foreground.Dark" Color="{StaticResource Common.Control.Color.Foreground.Dark}" />
            <SolidColorBrush x:Key="Common.Control.Brush.BorderBrush" Color="{StaticResource Common.Control.Color.BorderBrush}" />
            <sys:Double x:Key="Common.Control.Double.Width">24</sys:Double>
            <sys:Double x:Key="Common.Control.Double.Height">24</sys:Double>
            <sys:Double x:Key="Common.Control.Double.FontSize">14</sys:Double>
            <FontFamily x:Key="Common.Control.Font">Consolas</FontFamily>
            
            <utils:StringToGeometryConverter x:Key="StringToGeometryConverter" />
            <utils:TokenToGeometryConverter x:Key="TokenToGeometryConverter" />

            <utils:VDTreeViewDataTemplateSelector x:Key="TreeViewDataTemplateSelector" />

            <Style x:Key="Style.Window" TargetType="{x:Type Window}">
                <Setter Property="FontFamily" Value="{StaticResource Common.Control.Font}" />
                <Setter Property="FontSize" Value="{StaticResource Common.Control.Double.FontSize}" />

                <Setter Property="Title" Value=""/>
                <Setter Property="WindowState" Value="Maximized" />
                <Setter Property="ResizeMode" Value="CanMinimize" />
            </Style>
            
            <Style x:Key="Style.GroupBox" TargetType="{x:Type GroupBox}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground.Light}" />
                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Background.Light}" />
                <Setter Property="BorderBrush" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="BorderThickness" Value="0" />

                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />

                <Setter Property="Margin" Value="3.5" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                
                                <Border Background="{StaticResource Common.Control.Brush.Transparent}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />

                                <Border x:Name="Header" Grid.Row="0" Padding="7 0 0 0" Background="{TemplateBinding Background}" Height="{StaticResource Common.Control.Double.Height}">
                                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"/>
                                </Border>
                                <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Style.Grid.Content" TargetType="{x:Type Grid}">
                <Setter Property="Margin" Value="3.5 0" />
            </Style>

            <Style x:Key="Style.VDCanvas" TargetType="{x:Type ctrls:VDCanvas}">
                <Setter Property="Width" Value="500.0" />
                <Setter Property="Height" Value="500.0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Center" />

                <Setter Property="Background">
                    <Setter.Value>
                        <DrawingBrush TileMode="Tile" Viewport="0 0 15 15" ViewportUnits="Absolute">
                            <DrawingBrush.Drawing>
                                <GeometryDrawing Brush="#7FC8C8C8" Geometry="M 5 5 L 0 5 L 0 10 L 5 10 L 5 5 L 10 5 L 10 0 L 5 0 Z"/>
                            </DrawingBrush.Drawing>
                        </DrawingBrush>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ToolTip}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Background}" />
                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}" />
                <Setter Property="Placement" Value="Bottom" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Grid Margin="14">
                                <Border Background="{TemplateBinding Background}" Height="{StaticResource Common.Control.Double.Height}">
                                    <Border.Effect>
                                        <BlurEffect Radius="7" />
                                    </Border.Effect>
                                </Border>
                                <ContentPresenter Content="{TemplateBinding Content}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Style.TextBlock" TargetType="{x:Type TextBlock}">
                <!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}" />

                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>

            <Style x:Key="Style.TextBlock.Property" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Style.TextBlock}">
                <Setter Property="Margin" Value="7 0 0 0" />
            </Style>

            <Style x:Key="Style.TextBox" TargetType="{x:Type TextBox}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Common.Control.Brush.Foreground}"/>
                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}"/>
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>

                <Setter Property="Height" Value="{StaticResource Common.Control.Double.Height}" />
                <Setter Property="Margin" Value="3.5" />
                <Setter Property="Padding" Value="7 0 7 0" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="container" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer x:Name="PART_ContentHost" 
                                    Focusable="false" 
                                    VerticalAlignment="Center"
                                    HorizontalScrollBarVisibility="Hidden" 
                                    VerticalScrollBarVisibility="Hidden" 
                                    Padding="{TemplateBinding Padding}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!-- Mouse Over Animation -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                                    Storyboard.TargetProperty="(TextBox.Foreground).(SolidColorBrush.Color)" />
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                                    Storyboard.TargetProperty="(TextBox.BorderBrush).(SolidColorBrush.Color)" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground}"
                                                    Storyboard.TargetProperty="(TextBox.Foreground).(SolidColorBrush.Color)" />
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground}"
                                                    Storyboard.TargetProperty="(TextBox.BorderBrush).(SolidColorBrush.Color)" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <!-- Focused Amimation -->
                                <Trigger Property="IsFocused" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                                    Storyboard.TargetProperty="(TextBox.Foreground).(SolidColorBrush.Color)" />
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                                    Storyboard.TargetProperty="(TextBox.BorderBrush).(SolidColorBrush.Color)" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground}"
                                                    Storyboard.TargetProperty="(TextBox.Foreground).(SolidColorBrush.Color)" />
                                                <ColorAnimation Duration="00:00:00.200" To="{StaticResource Common.Control.Color.Foreground}"
                                                    Storyboard.TargetProperty="(TextBox.BorderBrush).(SolidColorBrush.Color)" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Style.TextBox.Markup" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Style.TextBox}">
                <Setter Property="BorderThickness" Value="0 1 0 0"/>

                <Setter Property="MinLines" Value="5" />
                <Setter Property="Height" Value="105" />

                <Setter Property="Margin" Value="7 3.5" />
            </Style>

            <!--#region ToolBar ToolBar.Buttons Styles-->

            <Style x:Key="Style.StackPanel.ToolBar" TargetType="{x:Type StackPanel}">
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="Margin" Value="3.5" />
            </Style>
            
            <!-- Base class for toolbar buttons -->
            <Style x:Key="Style.Button.ToolBar" TargetType="{x:Type Button}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}" />
                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="BorderBrush" Value="{StaticResource Common.Control.Brush.BorderBrush}" />
                <Setter Property="BorderThickness" Value="0" />

                <Setter Property="Width" Value="{StaticResource Common.Control.Double.Width}" />
                <Setter Property="Height" Value="{StaticResource Common.Control.Double.Height}" />
                <Setter Property="Margin" Value="7 0" />
                <Setter Property="Padding" Value="1" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="background" 
                                Background="{StaticResource Common.Control.Brush.Transparent}"
                                BorderBrush="{StaticResource Common.Control.Brush.Transparent}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <Path x:Name="foreground" Focusable="False" Margin="{TemplateBinding Padding}"
                                    Fill="{TemplateBinding Foreground}"
                                    Stroke="{TemplateBinding BorderBrush}"
                                    StrokeThickness="1" Stretch="Uniform"
                                    Data="{TemplateBinding Content, Converter={StaticResource StringToGeometryConverter}}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Include MouseOver animation for Foreground and BorderBrush propertise -->
            <Style x:Key="Style.Button.ToolBar.Animation1" TargetType="{x:Type Button}"
                   BasedOn="{StaticResource Style.Button.ToolBar}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.250" 
                                        To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                        Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)" />
                                    <ColorAnimation Duration="00:00:00.250" 
                                        To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                        Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)" />
                                    <ThicknessAnimation Duration="00:00:00.125" To="-2"
                                        Storyboard.TargetProperty="Padding" />
                                    <ThicknessAnimation Duration="00:00:00.125" BeginTime="00:00:00.125" To="1"
                                        Storyboard.TargetProperty="Padding" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.125" 
                                        To="{StaticResource Common.Control.Color.Foreground}"
                                        Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)" />
                                    <ColorAnimation Duration="00:00:00.125" 
                                        To="{StaticResource Common.Control.Color.Foreground}"
                                        Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Include MouseOver animation only for BorderBrush property -->
            <Style x:Key="Style.Button.ToolBar.Animation2" TargetType="{x:Type Button}"
                   BasedOn="{StaticResource Style.Button.ToolBar}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.250" 
                                        To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                        Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)" />
                                    <ThicknessAnimation Duration="00:00:00.125" To="-2"
                                        Storyboard.TargetProperty="Padding" />
                                    <ThicknessAnimation Duration="00:00:00.125" BeginTime="00:00:00.125" To="1"
                                        Storyboard.TargetProperty="Padding" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.125" 
                                        To="{StaticResource Common.Control.Color.Foreground}"
                                        Storyboard.TargetProperty="(Button.BorderBrush).(SolidColorBrush.Color)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <Style x:Key="Style.Button.ToolBar.Create" TargetType="{x:Type Button}" 
                   BasedOn="{StaticResource Style.Button.ToolBar.Animation1}">
                <Setter Property="Content" Value="M 39,46L 46,46L 46,39L 51,39L 51,46L 58,46L 58,51L 51,51L 51,58L 46,58L 46,51L 39,51L 39,46 Z M 31,25L 38,25L 38,18L 43,18L 43,25L 50,25L 50,30L 43,30L 43,37L 38,37L 38,30L 31,30L 31,25 Z M 18,39L 25,39L 25,32L 30,32L 30,39L 37,39L 37,44L 30,44L 30,51L 25,51L 25,44L 18,44L 18,39 Z" />
            </Style>

            <Style x:Key="Style.Button.ToolBar.Delete" TargetType="{x:Type Button}" 
                   BasedOn="{StaticResource Style.Button.ToolBar.Animation1}">
                <Setter Property="Content" Value="F1 M 25.3333,23.75L 50.6667,23.75C 51.5411,23.75 51.8541,27.3125 51.8541,27.3125L 24.1458,27.3125C 24.1458,27.3125 24.4589,23.75 25.3333,23.75 Z M 35.625,19.7917L 40.375,19.7917C 40.8122,19.7917 41.9583,20.9378 41.9583,21.375C 41.9583,21.8122 40.8122,22.9584 40.375,22.9584L 35.625,22.9584C 35.1878,22.9584 34.0416,21.8122 34.0416,21.375C 34.0416,20.9378 35.1878,19.7917 35.625,19.7917 Z M 27.7083,28.5L 48.2916,28.5C 49.1661,28.5 49.875,29.2089 49.875,30.0834L 48.2916,53.8334C 48.2916,54.7078 47.5828,55.4167 46.7083,55.4167L 29.2917,55.4167C 28.4172,55.4167 27.7083,54.7078 27.7083,53.8334L 26.125,30.0834C 26.125,29.2089 26.8339,28.5 27.7083,28.5 Z M 30.0833,31.6667L 30.4792,52.25L 33.25,52.25L 32.8542,31.6667L 30.0833,31.6667 Z M 36.4167,31.6667L 36.4167,52.25L 39.5833,52.25L 39.5833,31.6667L 36.4167,31.6667 Z M 43.1458,31.6667L 42.75,52.25L 45.5208,52.25L 45.9167,31.6667L 43.1458,31.6667 Z" />
            </Style>

            <Style x:Key="Style.Button.ToolBar.Open" TargetType="{x:Type Button}" 
                   BasedOn="{StaticResource Style.Button.ToolBar.Animation1}">
                <Setter Property="Content" Value="F1 M 23.6506,56.2021C 22.5867,57.266 20.8618,57.266 19.7979,56.2021C 18.734,55.1382 18.734,53.4133 19.7979,52.3494L 27.6722,44.4751C 26.6112,42.7338 26,40.6883 26,38.5C 26,32.1487 31.1487,27 37.5,27C 43.8513,27 49,32.1487 49,38.5C 49,44.8513 43.8513,50 37.5,50C 35.3117,50 33.2662,49.3888 31.5249,48.3278L 23.6506,56.2021 Z M 37.5,31C 33.3579,31 30,34.3579 30,38.5C 30,42.6421 33.3579,46 37.5,46C 41.6421,46 45,42.6421 45,38.5C 45,34.3579 41.6421,31 37.5,31 Z" />
            </Style>
            
            <Style x:Key="Style.Button.ToolBar.Save" TargetType="{x:Type Button}" 
                   BasedOn="{StaticResource Style.Button.ToolBar.Animation1}">
                <Setter Property="Content" Value="F1 M 20.5833,20.5833L 55.4167,20.5833L 55.4167,55.4167L 45.9167,55.4167L 45.9167,44.3333L 30.0833,44.3333L 30.0833,55.4167L 20.5833,55.4167L 20.5833,20.5833 Z M 33.25,55.4167L 33.25,50.6667L 39.5833,50.6667L 39.5833,55.4167L 33.25,55.4167 Z M 26.9167,23.75L 26.9167,33.25L 49.0833,33.25L 49.0833,23.75L 26.9167,23.75 Z" />
            </Style>
            
            <Style x:Key="Style.ToggleButton.ToolBar.Drawing" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}" />
                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="BorderBrush" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="BorderThickness" Value="0" />

                <Setter Property="Width" Value="{StaticResource Common.Control.Double.Width}" />
                <Setter Property="Height" Value="{StaticResource Common.Control.Double.Height}" />
                <Setter Property="Margin" Value="7 0" />
                <Setter Property="Padding" Value="1" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="background" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <Path x:Name="foreground" Focusable="False" Margin="{TemplateBinding Padding}"
                                    Fill="{TemplateBinding Background}"
                                    Stroke="{TemplateBinding Foreground}"
                                    StrokeThickness="1" Stretch="Uniform"
                                    Data="{TemplateBinding Content, Converter={StaticResource StringToGeometryConverter}}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <!-- Mouse Over Animation -->
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.250" To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                                    Storyboard.TargetProperty="(ToggleButton.Foreground).(SolidColorBrush.Color)" />
                                    <ThicknessAnimation Duration="00:00:00.125" To="-2"
                                                    Storyboard.TargetProperty="Padding" />
                                    <ThicknessAnimation Duration="00:00:00.125" BeginTime="00:00:00.125" To="1"
                                                    Storyboard.TargetProperty="Padding" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.250" To="{StaticResource Common.Control.Color.Foreground}"
                                                    Storyboard.TargetProperty="(ToggleButton.Foreground).(SolidColorBrush.Color)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.250" To="{StaticResource Common.Control.Color.Foreground.MouseOver}"
                                        Storyboard.TargetProperty="(ToggleButton.Foreground).(SolidColorBrush.Color)" />
                                    <ThicknessAnimation Duration="00:00:00.250" To="-2"
                                        Storyboard.TargetProperty="Padding" />
                                    
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Duration="00:00:00.125" To="{StaticResource Common.Control.Color.Foreground}"
                                        Storyboard.TargetProperty="(ToggleButton.Foreground).(SolidColorBrush.Color)" />
                                    <ThicknessAnimation Duration="00:00:00.125" To="1"
                                        Storyboard.TargetProperty="Padding" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="Style.ToggleButton.ToolBar.Drawing.Line" TargetType="{x:Type ToggleButton}" 
                   BasedOn="{StaticResource Style.ToggleButton.ToolBar.Drawing}">
                <Setter Property="Content" Value="M 0 100 L 100 0" />
                <Setter Property="ToolTip" Value="Command to draw a simple line" />
            </Style>

            <Style x:Key="Style.ToggleButton.ToolBar.Drawing.CubicCurve" TargetType="{x:Type ToggleButton}" 
                   BasedOn="{StaticResource Style.ToggleButton.ToolBar.Drawing}">
                <Setter Property="Content" Value="M 0 100 C 0 0 100 100 100 0" />
                <Setter Property="ToolTip" Value="Command to draw a cublic Bezier curve" />
            </Style>

            <Style x:Key="Style.ToggleButton.ToolBar.Drawing.QuadraticCurve" TargetType="{x:Type ToggleButton}" 
                   BasedOn="{StaticResource Style.ToggleButton.ToolBar.Drawing}">
                <Setter Property="Content" Value="M 0 100 Q 0 0 100 0" />
                <Setter Property="ToolTip" Value="Command to draw a quadratic Bezier curve" />
            </Style>

            <Style x:Key="Style.ToggleButton.ToolBar.Drawing.StartWithMove" TargetType="{x:Type ToggleButton}" 
                   BasedOn="{StaticResource Style.ToggleButton.ToolBar.Drawing}">
                <Setter Property="Content" Value="M 0 0 H 6 L 3 4 L 0 0" />
                <Setter Property="ToolTip" Value="Start each new element with point" />
                
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Content" Value="M 0 0 H 6 M 7 1 L 4 5 M 2 5 L -1 1" />
                        <Setter Property="ToolTip" Value="Continue from the last point" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="Style.Button.ToolBar.Drawing.Close" TargetType="{x:Type Button}" 
                   BasedOn="{StaticResource Style.Button.ToolBar.Animation2}">
                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="Content" Value="M 0 100 Q 0 0 100 0 L 20 80 M 20 80 V 60 M 20 80 H 40" />
                <Setter Property="ToolTip" Value="Put the Close (Z) token" />
            </Style>

            <!--#endregion-->

            <!--#region TreeView & TreeView.Items Styles-->
            
            <Style x:Key="Style.TreeView" TargetType="{x:Type TreeView}">
                <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}"/>
                <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Transparent}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Common.Control.Brush.Transparent}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                
                <!--<Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeView}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                    <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>-->

                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type TreeViewItem}">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Setter Property="SnapsToDevicePixels" Value="True" />

                            <Setter Property="Foreground" Value="{StaticResource Common.Control.Brush.Foreground}" />
                            <Setter Property="Background" Value="{StaticResource Common.Control.Brush.Transparent}" />
                            <Setter Property="BorderBrush" Value="{StaticResource Common.Control.Brush.BorderBrush}" />
                            <Setter Property="BorderThickness" Value="0" />

                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" />

                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                        <ControlTemplate.Resources>
                                            <Style x:Key="TemplateStyle.ToggleButton" TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Padding="7">
                                                                <Path x:Name="element" Data="M 0 0 L 0 6 L 6 0 Z"
                                                                    Fill="{TemplateBinding BorderBrush}"
                                                                    Stroke="{TemplateBinding BorderBrush}">
                                                                    <Path.RenderTransform>
                                                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                    </Path.RenderTransform>
                                                                </Path>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="RenderTransform" TargetName="element">
                                                                        <Setter.Value>
                                                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ControlTemplate.Resources>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ToggleButton x:Name="expander" Style="{StaticResource TemplateStyle.ToggleButton}"
                                                ClickMode="Press"
                                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                Foreground="{TemplateBinding Foreground}"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Width="{StaticResource Common.Control.Double.Width}"
                                                Height="{StaticResource Common.Control.Double.Height}" />
                                            <Border Grid.Row="0" Grid.Column="1"
                                                Background="{TemplateBinding Background}" 
                                                BorderBrush="{TemplateBinding BorderBrush}" 
                                                BorderThickness="{TemplateBinding BorderThickness}">
                                                <ContentPresenter x:Name="PART_Header" 
                                                        ContentSource="Header" 
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                            </Border>
                                            <ItemsPresenter Grid.Row="1" Grid.ColumnSpan="2" x:Name="ItemsHost" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsExpanded" Value="false">
                                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                            <Trigger Property="HasItems" Value="false">
                                                <Setter TargetName="expander" Property="Visibility" Value="Hidden"/>
                                            </Trigger>
                                            <Trigger Property="IsSelected" Value="true">
                                                <Setter TargetName="PART_Header" Property="TextElement.FontWeight" Value="Bold" />
                                                <Setter TargetName="PART_Header" Property="TextElement.Foreground" 
                                                        Value="{StaticResource Common.Control.Brush.Foreground.MouseOver}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="PART_Header" Property="TextElement.Foreground" 
                                                        Value="{StaticResource Common.Control.Brush.Foreground.MouseOver}" />
                                            </Trigger>
                                            <!--<MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsSelected" Value="true"/>
                                                    <Condition Property="IsSelectionActive" Value="false"/>
                                                </MultiTrigger.Conditions>
                                                
                                            </MultiTrigger>-->
                                            <!--<Trigger Property="IsEnabled" Value="false">
                                                
                                            </Trigger>-->
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Style.Path.DataTemplate" TargetType="{x:Type Path}">
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Fill" Value="{StaticResource Common.Control.Brush.Transparent}" />
                <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" />
                <Setter Property="StrokeThickness" Value="1" />
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Width" Value="{StaticResource Common.Control.Double.Width}" />
                <Setter Property="Height" Value="{StaticResource Common.Control.Double.Height}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Center" />
            </Style>

            <Style x:Key="Style.TextBlock.DataTemplate" TargetType="{x:Type TextBlock}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Margin" Value="7 0 0 0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>

            <HierarchicalDataTemplate x:Key="DataTemplate.TreeView.Figure" DataType="model:VDFigure" ItemsSource="{Binding Tokens}">
                <Grid Height="{StaticResource Common.Control.Double.Height}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Path Grid.Column="0" Style="{StaticResource Style.Path.DataTemplate}" Data="{Binding Markup, Converter={StaticResource StringToGeometryConverter}}" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=TreeViewItem}}" />
                    <TextBlock Grid.Column="1" Style="{StaticResource Style.TextBlock.DataTemplate}" Text="{Binding Name}" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="DataTemplate.TreeView.Move" DataType="model:Move" ItemsSource="{Binding Tokens}">
                <Grid IsEnabled="False" Height="{StaticResource Common.Control.Double.Height}" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Path Grid.Column="0" Style="{StaticResource Style.Path.DataTemplate}" Data=""/>
                    <TextBlock Grid.Column="1" Style="{StaticResource Style.TextBlock.DataTemplate}" Text="Move" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="DataTemplate.TreeView.Close" DataType="model:Close" ItemsSource="{Binding Tokens}">
                <Grid IsEnabled="False" Height="{StaticResource Common.Control.Double.Height}" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Path Grid.Column="0" Style="{StaticResource Style.Path.DataTemplate}" Data=""/>
                    <TextBlock Grid.Column="1" Style="{StaticResource Style.TextBlock.DataTemplate}" Text="Close" />

                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="DataTemplate.TreeView.Line" DataType="model:Line" ItemsSource="{Binding Tokens}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Path Grid.Column="0" Style="{StaticResource Style.Path.DataTemplate}" Data="M 0 100 L 100 0"/>
                    <TextBlock Grid.Column="1" Style="{StaticResource Style.TextBlock.DataTemplate}" Text="Line" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="DataTemplate.TreeView.CubicBezierCurve" 
                                      DataType="model:CubicBezierCurve" ItemsSource="{Binding Tokens}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Path Grid.Column="0" Style="{StaticResource Style.Path.DataTemplate}" Data="M 0 100 C 0 0 100 100 100 0" />
                    <TextBlock Grid.Column="1" Style="{StaticResource Style.TextBlock.DataTemplate}" Text="Cubic Bezier Curve" />
                </Grid>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="DataTemplate.TreeView.QuadraticBezierCurve" 
                                      DataType="model:QuadraticBezierCurve" ItemsSource="{Binding Tokens}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Path Grid.Column="0" Style="{StaticResource Style.Path.DataTemplate}" Data="M 0 100 Q 0 0 100 0" />
                    <TextBlock Grid.Column="1" Style="{StaticResource Style.TextBlock.DataTemplate}" Text="Quadratic Bezier Curve" />
                </Grid>
            </HierarchicalDataTemplate>

            <!--#endregion-->
            
        </ResourceDictionary>
    </Application.Resources>
</Application>
